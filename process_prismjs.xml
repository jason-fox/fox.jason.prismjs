<?xml version="1.0" encoding="UTF-8"?>
<!--ant-->
<!--
  This file is part of the DITA-OT Prism-JS Plug-in project.
  See the accompanying LICENSE file for applicable licenses.
-->
<project
  xmlns:if="ant:if"
  xmlns:unless="ant:unless"
  xmlns:dita="http://dita-ot.sourceforge.net"
  name="fox.jason.prismjs"
>

  <target name="prismjs.css.copy">
    <condition property="prism.use.theme" value="bootstrap-contrast">
      <or>
        <equals arg1="${bootstrap.theme}" arg2="cerulean"/>
        <equals arg1="${bootstrap.theme}" arg2="darkly"/>
        <equals arg1="${bootstrap.theme}" arg2="flatly"/>
        <equals arg1="${bootstrap.theme}" arg2="sandstone"/>
        <equals arg1="${bootstrap.theme}" arg2="spacelab"/>
        <equals arg1="${bootstrap.theme}" arg2="zephyr"/>
      </or>
    </condition>
    <condition property="prism.use.theme" value="bootstrap-vapor">
      <equals arg1="${bootstrap.theme}" arg2="vapor"/>
    </condition>
    <condition property="prism.use.theme" value="bootstrap" else="default">
       <isset property="dita.plugin.net.infotexture.dita-bootstrap.dir"/>
    </condition>
    <property
      name="prism.css.theme"
      value="${dita.plugin.fox.jason.prismjs.dir}/css/${prism.use.theme}-theme.css"
    />
    <loadfile property="theme.css" srcFile="${prism.css.theme}"/>
    <echo
      append="true"
      message="${line.separator}${theme.css}"
      file="${extend.css.file}"
    />

    <property
      name="prismjs.css.file"
      value="${dita.plugin.fox.jason.prismjs.dir}/css/style.css"
    />
    <loadfile property="prism.css" srcFile="${prismjs.css.file}"/>
    <echo
      append="true"
      message="${line.separator}${prism.css}"
      file="${extend.css.file}"
    />
  </target>

  <target name="highlight.check">
     <!-- Only run the Highlight transform for HTML or PDF -->
    <condition property="prismjs.highlightable">
      <or>
        <equals arg1="${out.ext}" arg2=".html"/>
        <isset property="axf.formatter.output-format"/>
        <isset property="fop.formatter.output-format"/>
        <isset property="xep.formatter.output-format"/>
        <!-- add any additional missing transtypes here -->
        <contains string="${transtype}" substring="HTML" casesensitive="no"/>
        <contains string="${transtype}" substring="PDF" casesensitive="no"/>
        <contains
          string="${transtype}"
          substring="eclipsehelp"
          casesensitive="no"
        />
      </or>
    </condition>

    <condition property="is.html">
      <equals arg1="${out.ext}" arg2=".html"/>
    </condition>

    <condition property="prismjs.memory">
      <and>
        <equals arg1="${store-type}" arg2="memory"/>
        <isset property="prismjs.highlightable"/>
      </and>
    </condition>

    <dita-ot-echo id="PRSM004W" if:set="prismjs.memory"/>
  </target>


  <!--
    Check if Node is installed.
  -->
  <target 
    name="node.check" 
    if="prismjs.highlightable"
    description="Ensure that Node.js is available">
    <!-- For Unix run node as an executable -->

    <exec
      executable="node"
      dir="${dita.dir}"
      osfamily="unix"
      taskname="node"
      resultproperty="node.result"
      outputproperty="node.out"
      failonerror="false"
      failifexecutionfails="false"
    >
      <arg line="-v"/>
    </exec>
    <!-- For Windows run from a DOS command -->
    <exec
      executable="cmd"
      dir="${dita.dir}"
      osfamily="windows"
      taskname="node"
      resultproperty="node.result"
      outputproperty="node.out"
      failonerror="false"
      failifexecutionfails="false"
    >
      <arg value="/C"/>
      <arg value="node -v"/>
    </exec>

    <condition property="node.installed">
      <equals arg1="${node.result}" arg2="0"/>
    </condition>

    <dita-ot-fail unless:set="node.installed" id="PRSM003F"/>
  </target>


  <target name="highlight.init">
    <typedef file="${dita.plugin.fox.jason.prismjs.dir}/resource/antlib.xml"/>
    <property
      name="prismjs.node.script"
      value="${dita.plugin.fox.jason.prismjs.dir}/resource/node-prism.js"
    />
    <tempfile
      deleteonexit="true"
      destdir="${dita.temp.dir}"
      property="prismjs.temp.file"
      suffix=".js"
    />
    <copy
      file="${dita.plugin.fox.jason.prismjs.dir}/resource/prism.js"
      toFile="${prismjs.temp.file}"
    />

    <tempfile
      deleteonexit="true"
      destdir="${dita.temp.dir}"
      property="prismjs.unknown.file"
      suffix=".txt"
    />
    <touch file="${prismjs.unknown.file}"/>

    <property
      name="prism.component.dir"
      value="${dita.plugin.fox.jason.prismjs.dir}/resource/components"
    />

   
  </target>

  <target 
    name="highlight" 
    if="prismjs.highlightable"
    description="Highlight codeblocks using Prism.js">
    <basename property="prism.temp.dirname" file="${dita.temp.dir}"/>
    <restrict id="prismjs.ditafileset">
      <ditafileset processingRole="normal">
        <excludes format="ditamap"/>
        <excludes format="ditaval"/>
        <excludes format="image"/>
      </ditafileset>
      <and>
        <or>
          <contains text="&lt;codeph"/>
          <contains text="&lt;codeblock"/>
        </or>
        <name regex="\/${prism.temp.dirname}\/" handledirsep="true"/>
      </and>
    </restrict>
    <pathconvert
      property="prismjs.ditafiles"
      refid="prismjs.ditafileset"
      pathsep=";"
    >
      <map from="file:" to=""/>
    </pathconvert>

    <iterate-ditafiles
      list="${prismjs.ditafiles}"
      macro="highlight-dita-file"
      unless:blank="${prismjs.ditafiles}"
    />
  </target>

  <target name="prismjs" depends="highlight.init, highlight"/>

  <target name="prismjs.init" depends="highlight.check, node.check"/>

</project>
